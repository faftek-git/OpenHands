# Workflow that runs lint and tests for PRs
name: PR Validation

# Always run on PRs
on:
  pull_request:

# If triggered by a PR, it will be in the same group
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Run lint on the frontend code
  lint-frontend:
    name: Lint Frontend
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js 20
        uses: useblacksmith/setup-node@v5
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd frontend
          npm install --frozen-lockfile
      - name: Lint, TypeScript compilation, and translation checks
        run: |
          cd frontend
          npm run lint
          npm run make-i18n && tsc
          npm run check-translation-completeness

  # Run lint on the python code
  lint-python:
    name: Lint Python
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up python
        uses: useblacksmith/setup-python@v6
        with:
          python-version: 3.12
          cache: 'pip'
      - name: Install pre-commit
        run: pip install pre-commit==3.7.0
      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure --config ./dev_config/python/.pre-commit-config.yaml

  # Check version consistency across documentation
  check-version-consistency:
    name: Check Version Consistency
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Set up python
        uses: useblacksmith/setup-python@v6
        with:
          python-version: 3.12
      - name: Run version consistency check
        run: .github/scripts/check_version_consistency.py

  # Run frontend unit tests
  fe-test:
    name: Frontend Unit Tests
    runs-on: blacksmith-4vcpu-ubuntu-2204
    needs: [lint-frontend]
    strategy:
      matrix:
        node-version: [20, 22]
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: useblacksmith/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Run TypeScript compilation
        working-directory: ./frontend
        run: npm run make-i18n && tsc
      - name: Run tests and collect coverage
        working-directory: ./frontend
        run: npm run test:coverage

  # Run python unit tests on Linux
  test-on-linux:
    name: Python Unit Tests on Linux
    runs-on: blacksmith-4vcpu-ubuntu-2204
    needs: [lint-python, check-version-consistency]
    env:
      INSTALL_DOCKER: '0' # Set to '0' to skip Docker installation
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Install tmux
        run: sudo apt-get update && sudo apt-get install -y tmux
      - name: Setup Node.js
        uses: useblacksmith/setup-node@v5
        with:
          node-version: '22.x'
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: useblacksmith/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: poetry install --with dev,test,runtime
      - name: Build Environment
        run: make build
      - name: Run Unit Tests
        run: poetry run pytest --forked -n auto -svv ./tests/unit
      - name: Run Runtime Tests with CLIRuntime
        run: TEST_RUNTIME=cli poetry run pytest -svv tests/runtime/test_bash.py

  # Run specific Windows python tests
  test-on-windows:
    name: Python Tests on Windows
    runs-on: windows-latest
    needs: [lint-python, check-version-consistency]
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Install pipx
        run: pip install pipx
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: poetry install --with dev,test,runtime
      - name: Run Windows unit tests
        run: poetry run pytest -svv tests/unit/test_windows_bash.py
        env:
          DEBUG: "1"
      - name: Run Windows runtime tests with LocalRuntime
        run: $env:TEST_RUNTIME="local"; poetry run pytest -svv tests/runtime/test_bash.py
        env:
          TEST_RUNTIME: local
          DEBUG: "1"

  # Build Docker images only if all tests pass
  docker-build:
    name: Build Docker Images
    runs-on: blacksmith-4vcpu-ubuntu-2204
    needs: [fe-test, test-on-linux, test-on-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          echo "Docker build would run here, but we're just validating the PR"
          echo "The actual Docker build will be handled by the existing ghcr-build.yml workflow"
